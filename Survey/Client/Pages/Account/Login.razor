@page "/account/login"

@inherits LayoutComponentBase
@layout MainLayout

@using Survey.Client.Services;
@using Survey.Client.Contract;

@inject IUserContextService userContextService
@inject NavigationManager NavigationManager

<Jumbotron Class="container" Margin="Margin.Is4.FromBottom">
    <JumbotronTitle Size="JumbotronTitleSize.Is4">Logg på</JumbotronTitle>
    <Divider></Divider>
    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label style="color:white;">Username</label>
            <InputText @bind-Value="model.Username" class="form-control" />
            <ValidationMessage For="@(() => model.Username)" />
        </div>
        <div class="form-group">
            <label style="color:white;">Password</label>
            <InputText @bind-Value="model.Password" type="password" class="form-control" />
            <ValidationMessage For="@(() => model.Password)" />
        </div>

        <button disabled="@loading" class="btn btn-primary" style="width: 200px;">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Login
        </button>
    </EditForm>

</Jumbotron>>


@code {

    private LoginModel model = new LoginModel();
    private bool loading;
    private User loggedInUser;
    private IMessageService MessageService { get; set; }

    private async Task OnValidSubmit()
    {
        // reset alerts on submit
        //AlertService.Clear();

        loading = true;
        try
        {
            loggedInUser = await userContextService.Login(model);

            if (loggedInUser != null)
            {
                if (loggedInUser.IsAdmin)
                {
                    if (await userContextService.SetUser(loggedInUser))
                    {
                        var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/";
                        NavigationManager.NavigateTo("/");
                        StateHasChanged();
                    }
                }                
                else
                {
                    if (await userContextService.SetUser(loggedInUser))
                    {
                        var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/";
                        NavigationManager.NavigateTo("/");
                        StateHasChanged();
                    }
                    else
                    {
                        await MessageService.Error("");
                    }
                }
            }
            else
            {
                await MessageService.Error("");
            }
        }
        catch (Exception ex)
        {
            await MessageService.Error("");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }




}
